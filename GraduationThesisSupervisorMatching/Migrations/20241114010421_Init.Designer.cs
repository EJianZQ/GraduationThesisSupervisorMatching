// <auto-generated />
using System;
using GraduationThesisSupervisorMatching.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GraduationThesisSupervisorMatching.Migrations
{
    [DbContext(typeof(SupervisorMatchingDbContext))]
    [Migration("20241114010421_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("GraduationThesisSupervisorMatching.Models.Admin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("GraduationThesisSupervisorMatching.Models.Grade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("GraduationThesisSupervisorMatching.Models.Preference", b =>
                {
                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("PreferenceOrder")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("GraduationThesisSupervisorMatching.Models.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssignedTeacherId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("GPA")
                        .HasColumnType("decimal(4,3)");

                    b.Property<long>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTeacherId");

                    b.HasIndex("GradeId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GraduationThesisSupervisorMatching.Models.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("AcceptsTopStudent")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("BestStudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<int>("LowerLevelCapacity")
                        .HasColumnType("int");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<int>("MiddleLevelCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UpperLevelCapacity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BestStudentId")
                        .IsUnique();

                    b.HasIndex("GradeId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("GraduationThesisSupervisorMatching.Models.Preference", b =>
                {
                    b.HasOne("GraduationThesisSupervisorMatching.Models.Student", "Student")
                        .WithMany("Preferences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationThesisSupervisorMatching.Models.Teacher", "Teacher")
                        .WithMany("Preferences")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("GraduationThesisSupervisorMatching.Models.Student", b =>
                {
                    b.HasOne("GraduationThesisSupervisorMatching.Models.Teacher", "AssignedTeacher")
                        .WithMany("RegularStudents")
                        .HasForeignKey("AssignedTeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GraduationThesisSupervisorMatching.Models.Grade", "Grade")
                        .WithMany("Students")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedTeacher");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("GraduationThesisSupervisorMatching.Models.Teacher", b =>
                {
                    b.HasOne("GraduationThesisSupervisorMatching.Models.Student", "BestStudent")
                        .WithOne()
                        .HasForeignKey("GraduationThesisSupervisorMatching.Models.Teacher", "BestStudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GraduationThesisSupervisorMatching.Models.Grade", "Grade")
                        .WithMany("Teachers")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BestStudent");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("GraduationThesisSupervisorMatching.Models.Grade", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("GraduationThesisSupervisorMatching.Models.Student", b =>
                {
                    b.Navigation("Preferences");
                });

            modelBuilder.Entity("GraduationThesisSupervisorMatching.Models.Teacher", b =>
                {
                    b.Navigation("Preferences");

                    b.Navigation("RegularStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
